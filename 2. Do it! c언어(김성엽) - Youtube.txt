Do it! c언어 - 김성엽의 기초 c언어 강좌 




오류 줄이는 프로그래밍 습관

1. 조건문에 상수 먼저 쓰기

if(3=data) {  }	-> 오류를 감지해낼 수 있다.		 
if (3==data) {  }	-> 대입연산자

4+7+data -> 11+data로 계산
data+4+7 -> (data+4)+7로 계산


2. 문법 붙여쓰기 (세미콜론을 잘못된 위치에 사용)

//단일문장 및 중괄호 띄어쓸 경우 세미클론을 발견하기가 어려움
int data = 5;
if(data>3); 	//조건문에서 문장종결
data ++;		//원래라면 조건에서 걸러져서 실행자체가 성립이 안되어야 하지만 위줄에서 종결되어버렸으므로 data = 6이 나온다.

//단일문장 및 중괄호 붙여쓰기
if(data>3) data++;
if(data>3) {
data++;
result = data;
}

##############################################

[return]

//반환이 필요한 경우 : 자료형
int Sum(int _int1, int _int2)	
{
	return value; Sum()함수에 값 반환
}

//반환이 필요없는 경우 : void
void Sum()    
{
return; 단순 종결
}



[조건문 => 조건수식연산자]

//if문
if(value=1000) 
return 1;
else return 0;

//if문을 요약 
return (data > 5) ? 1 : 0;




[break]

문법1
switch()
{
case 1:
       문법2;
       break;	//문법 1 실행 - 1이 참이면 문법 2 실행후 탈출 - 문법6 실행
case 2:
       문법3;
case 3:
       문법4;
       break;	//문법 1 실행 - 1이 거짓이면 문법3,4 수행후 탈출 - 문법6 실행
default:   	 
       문법5;
       break;	//문법 1 실행 - 1,2,3이 거짓이면 문법5 수행후 탈출, 문법6 실행 / default 생략 가능, break 생략가능, 단 case 사이에 적는 default가 위치하는 경우 break; 필수.
}
문법6;




[9강]
############################## 
int a = 0;  초기값이 0
int b;       초기값이 null이므로 쓰레기값

break; 자신이 포함된 반복문(단일/{ }) 종료, 하나의 반복문에만 적용



[for]
for( 1)시작조건; 2,5)종결조건; 4)조건변화수식) 
3)문법1;

///5에서 종결시 탈출


int sum = 0, num=1;
for(; num<=5, num++){ }			///시작조건 생략가능 

int sum, num;
int(sum=0,num=1; num<=5, num++){ }	///,사용하여 변수 여러개 초기화 가능


for(;;) { }	//무한반복


[while]
while (종결조건) 문법1;	///종결조건은 생략불가

while() {  }		///오류
while(1) {  }		///숫자는 1,2,-1아무거나 넣어도 됨


do 문법1; while(종결조건);	///do 한번 실행 후 while 종결조건 검사한뒤 이상없으면 



[countinue]

for(m=5; m<8; m++) { 
if(m==6)countinue;		//m=6일경우에 다시 조건문으로 되돌아감
printf("m(%d)\n", m);
}	


[goto] 
어떤 위치에 있던지 상관하지 않고 이동하지만 c언어를 파괴하므로 가급적 사용하지 않는 것이 좋다.



10강
#############################


11강
#############################
지역변수 : 
- 스스로 초기화되지 않는다.
- 지역 내부에서만 사용하고 사라지므로 서로 다른 함수 내에서는 동일한 이름(서로 상관없는 값)의 지역변수 사용 가능하다. (독립성)


전역변수 : 
- 함수 밖에서 선언됨
- 프로그램이 시작되고 종료될 때까지 함께한다.
- 프로그램 전체 영역에서 사용 가능하므로 동일한 이름을 사용할 수 없다.
- 함수들이 전역변수에 종속적이 되어버리므로 가급적 사용하지 않는 것이 좋다. (독립성 부족)


int result;				//전역변수
void Sum(int _int1, int _int2)
{
	int result;			//지역변수
	result = _int1 + _int2;
}

void main()
{
	Sum(5,3);
	printf(result);		//전역변수
}


[extern]
분리된 프로젝트에서 전역변수가 참조하지 못할경우 불러오는 키워드



[const]
값을 변경하면 안되는 변수에 붙여 문법 오류를 일으키는 문법


####################################
부록1 
 
1) 함수가 필요한 이유
- 상황이 달라질 경우 변화에 대처하기 위해서(하나하나 바꾸지 않음)


(15분~25부터 다시보기)
2) if조건문은 실행 속도를 떨어뜨리므로 가급적 줄이는 것이 좋다.
- 조건문은 거짓이 안 나오는 것이 좋다.

ex) A가 5일경우 A에 2를 더한 뒤 A값에 저장하라

//방법1
if(5==A) A=A+2; 
//방법2
A=A+2*(5==A);	//()안의 조건이 참이면 1, 아니면 0이므로 A는 원래 값을 유지한다.


3) 메모리 정렬 방식



####################################
12강까지

배열 

int student[20];

int student[0];
int student[1];
.
.
int student[19];


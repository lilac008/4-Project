Do it! c언어 - 김성엽의 기초 c언어 강좌 






int Sum(int _int1, int _int2)	//반환이 필요한 경우 : 자료형
{
return value; Sum()함수에 값 반환
}

void Sum()    //반환이 필요없는 경우 : void
{
return; 단순 종결
}


###################################
void main(int argCount, char argValue[])
{
Arguement Count : 실행인자 개수
Arguement Value : 실행인자 값


명령프롬프트
c:\tipsware> test.exe  one  two  three

argc : 4
argv[0] -> c:\tipsware\test.exe 실행인자(실행파일이름) 
argv[1] -> one                      실행인자
argv[2] -> two                      실행인자
argv[3] -> three                    실행인자

실행인자(실행프로그램에 값을 넘겨주는 것, main함수의 매개변수로 전달됨 
ex)매개변수는 함수에 값을 넘겨주는 것)

}

###################################

오류 줄이는 프로그래밍 습관

1.(연산자가 들어가는 조건문에)상수 먼저 쓰기

if(3=data) {  }	-> 오류를 감지해낼 수 있다.		 
if (3==data) {  }	-> 대입연산자

4+7+data -> 11+data로 계산
data+4+7 -> (data+4)+7로 계산


2.세미콜론을 의도와 다르게 잘못된 위치에 사용 

//단일문장 및 중괄호 띄어쓸 경우 세미클론을 발견하기가 어려움
int data = 5;
if(data>3); 	//조건문에서 문장종결
data ++;		//원래라면 조건에서 걸러져서 실행자체가 성립이 안되어야 하지만 위줄에서 종결되어버렸으므로 data = 6이 나온다.

//단일문장 및 중괄호 붙여쓰기
if(data>3) data++;
if(data>3) {
data++;
result = data;
}


조건문
if(value=1000) return 1;
else return 0;

조건 수식 연산자
return (data > 5) ? 1 : 0;


문법1
switch()
{
case 1:
       문법2;
       break;	//문법 1 실행 - 1이 참이면 문법 2 실행후 탈출 - 문법6 실행
case 2:
       문법3;
case 3:
       문법4;
       break;	//문법 1 실행 - 1이 거짓이면 문법3,4 수행후 탈출 - 문법6 실행
default:   	 
       문법5;
       break;	//문법 1 실행 - 1,2,3이 거짓이면 문법5 수행후 탈출, 문법6 실행 / default 생략 가능, break 생략가능, 단 case 사이에 적는 default가 위치하는 경우 break; 필수.
}
문법6;




int a = 0;  초기값이 0
int b;       초기값이 null이므로 쓰레기값



break; 자신이 포함된 반복문(단일/{ }) 종료, 하나의 반복문에만 적용
continue; 



[9강]
############################## 

for( 1)시작조건; 2,5)종결조건; 4)조건변화수식) 
3)문법1;

///5에서 종결시 탈출


int sum = 0, num=1;
for(; num<=5, num++){ }			///시작조건 생략가능 

int sum, num;
int(sum=0,num=1; num<=5, num++){ }	///,사용하여 변수 여러개 초기화 가능


for(;;) { }	//무한반복


####################################
while (종결조건) 문법1;	///종결조건은 생략불가

while(){  }			///오류
while(1){  }		///숫자는 1,2,-1아무거나 넣어도 됨


do 문법1; while(종결조건);	///do 한번 실행 후 while 종결조건 검사한뒤 이상없으면 


	








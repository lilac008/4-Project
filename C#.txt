
- IDE(Integrated Development Environment) :  프로그램 제작을 도와주는 프로그램, 한줄한줄 읽는 걸 도와준다.
- visual studio 디버깅 : F10 


- 유니티 폴더도 영어로 만들어야 한다. 한글처리가 미흡할 수 있음. 
- C#은 고지식한 언어로, 프로그램 시작(Main method) 조차도 class 안에 묶어놔야 한다. 
****
object oriented(객체지향) : 
class 안의 object를 만들고, 그 object를 기반으로 모든 걸 해결하기 때문에 객체지향이라고 한다. 
단, object를 만들기 전에 class 부터 먼저 설계해야 한다.

객체지향
내가 구상한 개념1 : 상하좌우로 움직이는 Player를 만들고 싶다 
class Player(){ 상하좌우로 움직이는 코드 } 라는 script(class 설계도)를 만들어서 player object에 연결시켜 프로그램 실행. 

내가 구상한 개념2 : 아이템이 담기는 인벤토리를 만들고 싶다.
-> class Inven() { 아이템이 담기는 코드, 배열 }

****


using System; //누군가 만들어 정의해놓은 코드를 쓰겠다.


namespace Aprogramer :     //namespace : 구상한 개념이 겹칠 때 개념을 분류하는 용도
{
       class.Aprogramer.Potion
       {
     	  //HP 포션
       }
}


namespace Bprogramer :     
{
       class.Bprogramer.Potion
       {
       	//MP 포션
       }
}



literal
리터럴 값
리터럴 초기화


ctrl + exe 파일
exe파일 실행시 램에 복사됨

ctrl + home : 맨 위로
ctrl + end : 맨 아래로






<누가 (변수선언)> 무언가 만든다는 것은 메모리를 할당한다는 것

램(4giga)   	          하드디스크
Player script                       exe
int hp;          (주소값 할당) 
int hp;          (똑같은 번지에 할당할 수 없으므로 빗금으로 표시된다) 
int mp = 100; (초기값 할당)
(const(상수, 변하지 않는) : 주소값 n번째에 int4바이트만큼 공간을 만들고 mp라 이름짓고 100이라는 값을 채워넣어라)



<무엇을 할 것인가 (멤버함수)>
몹을 공격하고, npc와 대화하고, 스킬을 사용한다.

class Player
{		          
       Player의 공격력;	        (멤버변수)
       Player가 공격력으로 때린다    (멤버함수)
}



class Player		(설계도)
{
       int lv = 1;		((class)멤버변수 )
       int hp = 100;		
       int mp = 100;
       int attackPoints = 10;


       void Fight()               ((class)멤버함수)
       {
	int damage = 0;	(지역변수 : 일회용, 선언되는 순간 메모리 할당되고 함수가 끝나는 순간 사라진다)
	cw("");	
       };


       /// A
       void SetStatus(int _Hp, int _Mp)                ((class)멤버함수 : 외부에서 매개변수를 받아들여 내부 변수를 변화시키는 용도 (변화시켜 플레이어에게 전달))
       {
	Hp = _Hp;
	Mp = _Mp;
       }

       /// B
       void LevelUP(int _num)          	              
       {
	attackPoints = attackPoints + (_num * 3);
       }

       /// C 
       void Damage(int _dam,  int _subDam)        
       {
	Hp = Hp - _dam;
	Hp = Hp - _subDam;
       }

       /// D
       public int LevelUP(int _num) 		    //(class)멤버함수는 return해주려는 해당 자료형과 동일한 자료형 이어야 한다.        	  
       {
	return lv;	                                        //return값이란 object가 자신의 상태를 외부에 알려주는 용도로 사용되는 것으로, 외부에 알려주는 순간 (얼마나 많은 코드가 return아래에 있든) 함수는 끝난다.
       }

       public int DamageToHPReturn(int _dam)      
       {
	Hp = Hp - _dam;
	return Hp;
       }	
       


}


class Program
{
   static void Main() 		           (main함수)
   {
        int Attack2 = count; 	          	         (지역변수 : 일회용, 선언되는 순간 메모리 할당되고 함수가 끝나는 순간 사라진다)
        Player player  = new Player();             (object화(객체화) : player설계도대로 player를 생성해내라)    //obj를 만들었다는 것은 메모리를 지불했다는 것


        /// A
        player.SetStatus(10, 10);	  	(매개변수에 얼마가 들어갔는지 디버깅으로 확인가능)   
        /// A-2
        player.Hp = player.Hp + 1;	  	(값을 확인하기 힘듬, 바뀌는 곳마다 값을 재설정해야 함)
        player.Mp = player.Mp + 1;
	
        /// B
        player.LevelUP(1);

        /// C
        player.Damage(10, 1);

        /// A,B,C : 외부의 값을 받아서 object(객체)가 내부 상태를 변화시키기 위해 함수를 선언

        /// D
        player.DamageToHPReturn(50);



   }
}


10화 이해안감
code (상수형, 수정이 불가능함, 함수 그 자체가 수정이 불가)
data 
hip
stack (함수, 변수 : 메모리 차지 후 사라짐)


Reference 


























asset store - table



[프레임의 차이]
태권V(1976) -> 18frame (끊기는 화면)
게임           -> 최소 60frame


[컴퓨터 구조]
MS  c, c++  컴퓨터 내장메모리(CPU), 그래픽카드(GPU) => 화면 출력


[게임 엔진]
Unreal (c++) : 게임엔진                                      - c++(기계어, 속도 빠름, bug적음) 프로그래머
Unity3D (c#) : GPU 제어가 어려워서 나온 것이 unity   - c#  (해석어, 속도 느림, bug많음) 프로그래머


[게임 개발 과정]
기획서    			      - 기획
Unity3D 개발자 (c#개발자)                     - c# 프로그래머 (unity개발자 공고 = c# 개발자를 찾는 것, 그림, 사운드 필요없다.), 그래픽을 어떻게 표현했느냐
3D graphic data(3dMAX)를 unity가 가져옴  - 3d 모델러
2D image data(포토샵 등)를 unity가 가져옴 - 2d 그래픽디자이너
sound data(wav,mp3 등)를 unity가 가져옴  - 사운드 디자이너

Unity <- Resource(3D/2D/sound) 
Unity <- OpenGL(Window,Linux) / DirectX(MS만 호환 가능/Android,IOS 불가) : GPU 제어를 위한 component로 둘 중 택1 
- (놓침) c#은 .dot net(Android,IOS 등)에서 interpret한다.


[VR과 AR의 차이]
VR : 가상현실 / 1인칭 / 만들기쉬움 / 최소 3840해상도의 그림한장
AR : 증강현실 / 3인칭 /               / image processing, depth 카메라 2개  


[AR component 종류]
수 많은 AR component 중  AR Foundation / MAXST / Vuforia 가 대표적이다.
1) AR Foundation   : Unity 공식 제공, 상업용에 비해 질이 떨어짐
2) MAXST : 상업용
3) Vuforia : 상업용


[1. AR Foundation (Unity 공식 제공, PC (X), Android폰 (O))]
- Support Platform
ARCore :  안드로이드( - java,c# ) 연결
ARKit    :  아이폰(IOS - c,c++ ) 연결
MagicLeap : 미래기술 (안경으로 씀, 컴퓨터 연결해야함)
HoloLens    : 미래기술 (안경으로 씀) 

- Feature Support Per Platform
(tracking이란 : obj 주위로 카메라를 흔들거나 360도로 돌리면서 깊이감을 인식한 뒤 점으로 좌표를 나타냄)
Device tracking 화면 추적
Plane tracking 4개의 점 좌표를 기반해 평면을 잡아냄
Point clouds 점 좌표 추적 
Face tracking 얼굴 추적
2D image tracking 추적
3D object tracking 물체 추적
2D/3D body tracking 몸 추적
Raycast
Occulusion 겹친 부분 처리함



[Unity - AR 설치]
1) Window - Package Manager - packages : Unity Registry로 설정 - 검색창에 AR 검색 - AR Foundation / ARCore XR Plugin / ARKit Face Tracking / ARKit XR Plugin 설치
2) 위 순서대로 설치 후 project창의 Package폴더에 설치된 폴더 5개 확인.
3) 구글 : AR foundation sample 검색 (https://github.com/Unity-Technologies/arfoundation-samples) - 2021.3  4.2 (verified) 다운로드 - arfoundation-samples-4.2 압축 해제 후 unity로 연결(Unity 2021.3.5f1 버전) 


[Unity에서 Hierarchy / Inspector에서 설명한 부분]
- (놓침) Layer 
- Light : Point (부분 그림자 제거, 보통 영화에는 사람 1당 수천개가 들어간다)
- UI (Graphic User Interface) : Canvas (2d 형태) - image : 원 그림을 손실시켜 압축시킴 / raw image : 원 그림 그대로 / UI생성시 자동으로 생성되는 EventSystem : 유저가 액션을 취했을 때 이벤트를 처리
- 우클릭 - XR (Package Manager를 통해 폴더에 설치된 패키지들은 XR로 전부 소환가능)


[AR Session Origin]
- AR Session Origin : 3D AR에서 쓰는 가상 카메라 매칭
우클릭 - XR - AR Session
- AR Session : tracking mode :  position and rotation(위치는 고정하고 그 주위를 회전하는)

AR Session Origin 컴포넌트
- AR Session Origin : 3D AR에서 쓰는 가상 카메라 매칭
- AR Plane Manager : 평면 찾아내기, 정확하게 찾아내지는 못함  / image processing : 1+1 = 2가나올 확률이 50%냐, 70%냐 ex)주차할때 인식하는 용도 / HolloRense는 정확하게 잡아내지만 AR은 image processing이 정확도가 떨어지고, 발전 가능성이 낮다.
- AR Point Clouds Manager : 평면을 구분하는 용도로 점 찾아내기 (점 없는 부분: 평면, 거의 쓸일이 없음)
- AR Raycast Manager : 빛으로 추적한 obj 전부 끌고 옴 
- Place On Plane : 사각형 평면을 찾아냈을 때 그 위에 어떤 obj를 올릴 건지에 대한 내용

AR Session Origin - AR Camera 컴포넌트
- Audio listener : 외부 사운드 파일을 재생하는 컴포넌트, 마우스 오른쪽에 붙이면 오른쪽에 소리남 (하나만 있어야 함, 두 개 이상 에러남)
- AR Pose Driver(Script) : AR 카메라 데이터를 가져와 화면에 뿌려줌 (? 확실하지 안흥ㅁ)
- AR Occlusion Manager (Script) : 화면이 겹쳤을 때 겹친부분 처리, 구석진 데 좀 더 어둡게 처리해서 현실감
- AR Camera Backgrount (Script) : 배경 어떻게 처리할 건지




[Unity]
- visual studio       : c, c++, c# 등 지원되나 그만큼 프로그램이 무겁다. 
visual studio code  : 자동완성 되고 가벼우므로 적극 권장. (https://code.visualstudio.com/Download)

- Package import : 시킬 때 기존 파일 전부 백업시키는 습관이 있어야 한다.

- Package Manager : 모든 패키지 설치 및 관리하는 곳

- 좌표 : 3차원 행렬, Unity에서는 transform()에서 행렬 계산을 대신해준다
x축 중지 (좌우)
y축 엄지 (앞뒤)
z축 검지 (위아래)

- 함수 호출 순서 : Life Cycle (하나의 class(script)가 돌아가는 방식)  / 구글 : unity3d lifecycle 검색 - ex) https://lhh3520.tistory.com/83
1) 서로 다른 Class(서로 다른 script)의 OnStart() 실행 순서 : Hierarchy창에서 game obj 순차적으로 하나씩 실행시킨다.
2) Game Obj가 상속 관계일 경우 실행시키는 순서 : 자식부터 먼저 실행하고 부모는 맨 나중에 실행된다. 
3) 함수 가져올 때 : Public 선언으로 가져오기 >>> get components 등으로 가져오기(start()에서 딱 1번 실행시키는 건 괜찮음. update내에서는 속도 느려지므로 절대 사용 금지)


- Material : (GPU에서 지정, 화질이 달라보임 / png 파일을 game obj의 inspector창에 끌어놓으면 연결 가능)   
Material - Shader(에셋스토어 - shader를 가져와 어떻게 표현하느냐에 따라 질이 달라진다.)

Albedo
occlusion
detail mask

cutout 일정 색상만 빼냄
opaque 불투명체 
transparent 투명처리 

Normal Map : 구멍?
Height map  : 높낮이
Occlusion     : 현실처럼 음영차이, 현실감   / Normal Map과 Occlusion 
Detail Mask   : ?
UV Set : 좌표, 최대값 1 :
Reflection : 반사 (제대로 나오는 편은 아니지만 좋은 그래픽 카드 넣으면 실물처럼 잘 나온다고 함)


- Android로 import/compile하는 법은 구글에 잘 안 나오니 반드시 배워놓고 가라. 다들 공개하기 싫어서 안 해준다.
- 언리얼은 공개된 정보가 없어 개노가다를 해야 한다. 그냥 unity에 집중하라. unity 잘하면 unreal도 잘하게 된다.

- Window에서 MAC 컴파일 하지 말것 (MAC은 정책 상 시키는 대로만 개발해야함)
IOS과 MAC은 보완이 철저해서 그렇게 빌드한 데이터는 앱스토어에 등록이 안 된다.
구글 앱스토어 : 지정된 아이디 외에 다른 아이디는 런칭이 안됨 
window용, android용 앱만 생각하고 아이폰,맥은 생각도 하지 마셈


-------------------------------


Image Tracking 


[Project Setting] 
splash image : 프로그램 실행시 로고 이미지(를 보고 무료/유료 구분)
configuration - mono : c#코드로 안드로이드 / 아이폰 코딩 가능
                 - IL2CPP : 모바일로 코딩 가능


Api Compatibility Level - .Net Framework (c#으로 ) / .Net Standard 2.1()

Stack Trace : 전부 none


obj tracking은 변환을 해야하지만 이 이미지는 그대로 쓸 수 있다.


카메라 작동에 꼭 필요한 스크립트
- AR pose driver : position (script)
- AR camera manager (script)
- AR camera background (script)

join 사람 관절 

Depth : 거리, 잘 나오지만 정확하지 않다.
Depth Image : 깊이 색 지정

AR Occulusion Manager : 사람 찾는 속도


[Preference (edit-Preference)]
External Tools : 안드로이드를 컴파일하는 엔진 라이브러리, jdk mdk , 

[모바일 세팅]
Build Setting, Preference

asset store - sample --


------------------------

[MAXST]
MAXST(IOS) / Vuforia(Android) 비교영상 : https://www.youtube.com/watch?v=PyPinrG1GdA (IOS보다 Android가 떨어지므로 정당한 비교라고 볼 수는 없다.)
360도로 회전하며 3D 스캔 후 tracking에 사용(점들은 3D에서 생성된 좌표값) 


1) 파일 다운 후 Unity에 연결 (Download - SDK - Unity Download) : https://developer.maxst.com/MD/downloadsdk
2) 설정하기
File - Buildsetting - Project Setting - Player - Other Setting
- Rendering - Auto Graphics API 비활성화
- Graphics APIs for windows - Direct 비활성화

ARcamera : prefab : select가 뜨면 prefab으로 만들어져있다는 의미
- camera background : unity에 있는 카메라를 반영


[OpenGL ???  script]
SystemInfo.GraphicsDeviceType 정의로 이동 : GPU 뭘 사용할 수 있는지 알 수 있음 
Application.platform 정의로 이동 - RuntimePlatform 정의로 이동 :  뭘 사용할 수 있는지 알 수 있음

[CameraDevice script]
cameraType = AbstractConfigurationScriptableObject. : 첫번째 카메라를 사용하여 AR


- 1byte = 8bit / 화면에 출력된 점 하나 : 4byte = 32bit, 
- 2D sprite(그림 파일)   : CPU에서 data 처리
  3D Texture(그림 파일) : GPU에서 data 처리, GPU에 맞는 UV 좌표계(최대값 UV:1)를 사용
- 
Asset
- MaxstARSamples - Scenes - CodeReader : 바코드 읽기    /  모바일로 바코드 scan할 때 Maxst 사용

code scan sample


- Maxst AR SDK 듀토리얼 - instant Tracker (ver 3.5) : https://www.youtube.com/watch?v=uC1_h3RrQ2o


AR camera - configuration - License Key Setting :  앱 하나당 라이센스키 하나
camera Type
webcam Type 
camera Resolution : 해상도 / 해상도 몇 bit인지 계산하는 법 배우기
wearable Type : image processing은 CPU와 관련있다.(GPU (X))

optimize : 속도 용량을 줄임

- 해상



(졸다가 놓침)
[android 사용법]
Preference
External Tools
SDL(), JDK(), NDK() 설치하고 android도 개발자 버전으로 버전을 수정해야 apk를 실행할 수 있다. - c++ 이 내부적으로 깔려 있다.  
camera 바인딩 시킴 - scene 매니저 만들기 - instnat Tracker 

안드로이드 개발자 버전 설정 / 옵션 활성화
https://blog.naver.com/lifeformula/221685090225



- imageTracking (공룡) : https://www.youtube.com/watch?v=uC1_h3RrQ2o
AR Foundation : 그림을 잘 못찾음
MAXST          : 그림을 조금 더 잘 찾음 / 그림을 그대로 검색할 수 없어서 검색할 수 있는 데이터로 변형 - MAXST에서 


이미지 업로드 (별 4~5개 꽉차야 tracking이 잘됨, 색깔이 다양하고 음영차이가 확실할수록 tracking이 잘 된다)
width: 1m기준

선이 꺾이는 부분 인식

- Scene Manager 
자식 enable/disable 시킬 수 있으며,  컨텐츠는 음악, url 등이 가능하다.


Assets폴더 - MaxstARSamples폴더 - Scenes폴더
- image Tracker : 
imageTrackable - maxst_cube 
imageTrackable - cube
imageTrackable - particle system --> imageTrackable - script에 연결
particle system(gpu로 출력, 제대로 된 폭파씬들은 point들이 3만개 정도 들어가므로 리소스를 많이 잡아먹는다.) 

- cloud Trackable : cloud server를 지원
- video Tracker : 카메라 안의 영상을 추적 
- object Tracker : 공통적으로 tracking 성공시 자식 obj 전부 active 시킴 

Image
Texture Type :  default,  sprite(2D),  normal map(texture 입힌 뒤 polygon 처리하는 대신 normal map이라는 image로 처리)  - 그림수정안됨/쉐이더로만
Max Size : GPU에 한번 data가 저장되면 수정 불가.  
sprite : CPU에서 변경 가능.

VR 은 컨텐츠량 싸움
AR 

- MarkerTrackable : 마크 모양을 별도로 인식이 되게끔 따로 관리하지만 그래도 인식이 잘 안되는 편.

AR 실행시 필수적인 3요소
- AR camera
- Directional light
- Scene Manager


MAXST AR SDK 튜토리얼 - visual slam tool & object tracker(ver 4.1) : https://www.youtube.com/watch?v=ALRVDH_DkMs
visual studio (window) : c, c++, c#
Xcode (MAC) : c, c++, swift 


개인 GPS   : 최소 3-4개 위성에서 삼각함수(오차 20-30m)를 통해 data를 받음
군사용 GPS : 최소 7개 위성 (오차 5m) 


맥스트 AR SDK 최신 기술을 소개합니다! (ver4.1) : https://www.youtube.com/watch?v=G29Ze2yjiC0
- AR 바닥에 딱 붙어있지 않고 흔들거려 현실감이 떨어진다.
- Raycast - touch한 점을 기점으로 obj와 마찰이 이루어진다. 접촉 해제할때까지 계속 움직여짐
- 이미지 tracking : 캐릭터가 나타나 움직이는, 아동용 교재에 많이 쓴다.
- 가운데 잡고 멀리가면 잡히는데, 멀리서 잡으면 안 잡힌다. 카메라 두대는 한계가 있음 / 단, IOS는 depth 카메라가 있어 다르다.
- Marker Tracker : 와이파이 비밀번호 인식, QR코드로 상품 인식(image tracking과 비슷하지만 ), 바코드 인식


------------------------------------------------------------------------------------------------------
[프로그래머의 자세]
- 대중적 / 상업적 가치를 위해 만들어야 하는 것 > 내가 좋아하는 것, 내가 원하는 것 
(IT 업계에서 예술적 가치를 고수해봐야 의미없다. 대중에게 외면받아 10년 안에 사라지는 것들이 대부분, 예술 고집하다 배 굶기 딱 좋음) 
프로그래머가 자기가 원하는 걸로만 집어넣으면 대중의 외면을 받아 100% 망한다. 일단 재밌는 게 제일 중요하다.
5-10년 정도 코딩에만 전념하고, 서울, 경기로 가야 몸값이 올라간다.

- IT업계는 3개월만 쉬어도 못 따라갈 정도로 발전 속도가 극심하다. 평생 공부해야 한다.
ex) unity 2020에서 업그레이드 된 

------------------------------------------------------------------------------------------------------

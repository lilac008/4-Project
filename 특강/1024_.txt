망나니
https://mangkyu.tistory.com/15
https://mangkyu.tistory.com/48?category=762469

코드드래곤
https://codedragon.tistory.com/4092?category=82522

https://evan-moon.github.io/2019/11/22/tcp-flow-control-error-control/

https://dinfree.com/lecture/core/101_basic_2.html



1. Socket과 Stream

A  --socket-----------> B
   <-----------socket-- 

1) 소켓 통신 (Network Socket, 네트워크 소켓) 
- 네트워크 통신을 위해 데이터를 교환하는 지점으로 이 socket을 통해 서로 응답(데이터를 교환하기로 합의)하며 보내고자 하는 IP주소, port 주소를 명시한다. (IP주소 : 전화번호, port 번호 : 교환번호)
- 오늘날 컴퓨터 통신은 인터넷 프로토콜(Internet Protocol, IP)을 기반으로 하고 있으므로, 대부분의 네트워크 소켓은 Internet Socket이다. 

BSD SOCKET (버클리 소켓)
버클리대에서 C언어를 기반으로 만들어진 프로그램과 프로그램을 연결하는 도구. 네트워크 프로그램에서 가장 범용적. 


2) Stream (스트림)
파일을 읽거나 쓸 때, 통신망 소켓을 거쳐 통신할 때 사용되는 추상적 개념.



--------------------------------------------------------------------------------------------------

2. Protocol : 컴퓨터 간에 data를 주고 받기 위한 일련의 통신 규약

1) Protocol의 종류 
- TCP   (Transmission Control Protocol) 
- IP      (Internet Protocol, 아이피)
- HTTP  (HyperText Transfer Protocol) )
- SMTP (Simple Mail Transfer Protocol)
- FTP    (File Transfer Protocol)
- 각 protocol에서 작용하는 socket이 다르다. 


2) HTTP  (HyperText Transfer Protocol)
- 단방향 프로그래밍 (client가 요청하는 경우에만 server가 응답)
- 웹, 앱(Android, iOS) 개발 등에 주로 이용

Server	 <-- request --	Client
	 -- response -->


3) TCP (Transmission Control Protocol) / IP (Internet Protocol)
- 현재 인터넷에서 사용되는 사실상 통신 프로토콜의 표준으로 서로 기종이 다른 컴퓨터 시스템 간의 데이터 전송을 위해 개발된 통신 프로토콜
TCP : packet 전송 흐름을 제어 (data를 packet조각으로 나누고 순서에 맞게 받았는지 호출해서 확인)
IP    : packet을 운반

TCP (Transmission Control Protocol)
ex) 군사 및 연구 목적 -> 인터넷(World Wide Web), 게임서버
- 연결형 socket. 양방향 통신이 가능. 한번 연결하면 끊기지 않음. 한번 끊어지면 절대 연결이 안됨. 
- 발신지와 수신지를 연결하여 packet을 전송하기 위한 논리적 경로를 배정 (가상회선방식)
- 클라이언트와 서버는 1:1로 연결
- 패킷(*data를 packet단위로 나누어 전송후 원래대로 재조립)을 추적, 관리, 제어 -> 데이터 신뢰성, 정확도 높으나 UDP에 비해 속도가 느림(시간지연, CPU 소모 등) 
- 송신된 순서에 따라 중복되지 않게 데이터 수신 -> 오버헤드(처리하는데 들어가는 시간, 메모리 초과된 것) 발생, (순서에 따라 중복되지 않도록 protocol로 만들어놓고 protocol이 꽉 차면 더 이상 못 보내고 대기상태가 됨, ex) 유튜브 화상카메라 화면깨짐 / 오버헤드 = 대기상태 = 화면깨짐) 
- 데이터 크기 무제한
- 실시간 동영상 streaming이나 온라인 게임 등

-----------------------------------------------------

소켓(Socket) 프로그래밍
- server와 client가 특정 Port를 통해 연결을 유지하며 실시간으로 양방향으로 통신 
- TCP/IP를 기반으로 맺어진 네트워크 연결 방식(양방향)으로 HTTP와 달리 socket 프로그래밍은 server 역시 client로 요청을 보낼 수 있다. 
- 계속 연결을 유지하는 연결지향형 방식이기 때문에 실시간 통신이 필요한 경우에 사용 ex) 실시간 Streaming 동영상 중계, 실시간 채팅 등 즉각적으로 정보를 주고받는 경우에 사용
(반면 HTTP의 경우 유저가 서버로 동영상을 요청하기 위해서는 동영상이 종료되는 순간까지 계속해서 Http Request를 보내야 하고 이러한 구조는 계속 연결을 요청하기 때문에 부하가 걸리게 됨)

서버(server)	: 데이터를 제공			ex) 고성능 컴퓨터
클라이언트(client)	: server를 이용			ex) 컴퓨터 or 휴대폰
유저(user)	: client를 사용해 데이터를 이용	ex) 사람

-----------------------------------------------------

4) UDP (User Datagram Protocol)
- 비연결형(connect함수 불필요). 서버 socket, 클라이언트 socket의 구분이 없음
- socket대신 IP를 기반으로 데이터를 전송 ??????????? 
- 단방향 통신(보내기만함, 초당 60프레임은 느린 편이므로 신호가 들어왔을때 스레드를 사용해 즉각 반응하도록 만듬) 
- datagram 단위로 전송 -> 65535byte 초과시 잘라서 보냄(데이터 크기 제한)
- 서버와 클라이언트는 1 : N, N1 : N2 등으로 연결 -> 스트리밍 서비스, 실시간 멀티미디어 정보 처리에 유리 ex)전화
- data 정보를 보내거나 받는다는 신호절차를 거치지 않음 
  data가 제대로 전송되었는지 오류가 없는지 확인할 수 없으며 최소한의 오류만 검출. 신뢰성이 낮음
  data 순서와 상관없이 전송, 
  data가 손실되어도 오류는 발생하지 않음
-  손실된 데이터를 진행시키는 프로세스를 따로 처리해야 하므로 상당한 노하우가 필요하며 전문가들이 UDP를 주로 활용. 
- TCP보다 속도가 빠름
- 스트리밍 서비스에 유리




TCP/IP  (220V)						UDP (110V)     
연결형 							비연결형
가상회선방식						데이터그램방식
전송순서보장						X
수신여부확인						X
1:1 통신							1:N, N1:N2
신뢰성높음						낮음
대량전송							데이터제한
속도느림							빠름
ex) 게임 서버						ex) 전화   





--------------------------------------------------------------------------------------------------
TCP Flow (참고 : https://mangkyu.tistory.com/15)

SERVER				CLIENT
sokect()
bind()				socket()
listen()		<-		connect()
accept()		
read()/write()	<->		read()/write()
close()				close()

소켓통신 -> 단점 : 보안을 걸어야 한다. 
1) sokect()을 이용하여 소켓을 생성. 꼽는다. 
2) bind() ip와 port(통신별로 구분)번호를 설정
3) listen() 기다림. 대기상태. 클라이언트 접근 요청에 수신 대기열을 만들어 몇개의 클라이언트를 대기시킬지 결정 
4) accept()를 사용하여 클라이언트와의 연결을 기다림. 받아들임
5) read()/write() 받아서 처리  / read()서버에서 받음, write()서버로 보냄
6) close() 안시키면 포트가 남아있어 반드시 종료시켜야 함

클라이언트
1) socket()  가장먼저 소켓을 open
2) connect() 를 이용하여 통신할 서버의 설정된 ip와 port번호에 통신을 시도 (클라이언트 다운받을시 바이너리 코드로 ip,port번호가 다 보임 보안에 취약 )
3) 통신을 시도시, 서버가 accept()를 이용하여 클라이언트의 socket descriptor를 반환
4) 이를 통해 클라이언트와 서버가 서로 read()/write()를 하며 통신(이 과정이 반복)


--------------------------------------------------------------------------------------------------
UDP Flow (참고 : https://mangkyu.tistory.com/15)

SERVER				CLIENT     
sokect()				socket()
bind()				connect()	
recvfrom()			send()
sendto()				recv()
closesocket()			closesocket()

--------------------------------------------------------------------------------------------------

Process 

code		data		heap

thread1		thread2		thread3
stack		stack		stack


thread를 사용에 소켓 통신을 구현


*참조 - class가 code인지, heap인지, 
code  (실행 중 유지, 수정x)    :  text 영역 (상수, code들, method, class 그 자체)  / class
data  (실행 중 유지)             :  global 변수, static 변수 

heap   (계속 변화)               :  동적(dynamic), reference형                           /  new ClassName()의 본체

stack (계속 변화, 휘발성)       :  local 변수, parameter(매개변수), value형             /  new ClassName()의 instance 객체 
함수 생성 후 휘발, 휘발성이므로 메모리 소모가 없다고 봐야함, stack(구조체?)이라는 구조에 데이터를 집어넣었다 뺐다함
--------------------------------------------------------------------------------------------------

127.0.0.1 의미 - 윈도우에서 사용하는 모든 컴퓨터 IP
cmd에서 ipconfig 치면 IP주소가 뜬다. 



아이피 : 데이터 통로(데이터 통로 주소)로 아이피를 관리하는 서버가 따로 있음, 우리가 사용하는 아이피는 고정이 아니라 사설로, 속도가 느려터진 인터넷개념
 	고정아이피는 따로 관리하고 있음, 아이피를 할당받으면 유선전화를 하나 받은 것과 똑같다. 
	게임업체들은 고정 아이피를 쓴다. 1급 아이피주소는 클라이언트에서 아이피로 바로 올라가버린다. 네이버나 대형포탈은 최상위 속도가 매우 빠름
           

--------------------------------------------------------------------------------------------------


유니코드
아스키 코드 문자,숫자 바이트
랜카드  주소 IP 어떤 컴퓨터에서 사용했는지 시간까지 알 수 있다. 


TCP/IP
//서버가 먼저 실행된 상태에서 클라이언트를 실행
1:1이지만 서버가 먼저 열려야 한다.

프로트콜 주소는 하나만 입력해야하는 오류 > 스크립트 destroy함수 추가 > 껐다켜서 확인 > 

서버에서 게임화면에서 클릭하면 Debug.log로 하이서버 ~~
클라이언트에서 게임화면에서 클릭하면 Debug.log로 하이 클라이언트~~




